
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL COMMA DIVIDE ELSE EQ EQUAL EXP FALSE GE GT ID IF INT LBRACE LE LPAREN LT MINUS NEQ NUMBER OR PLUS PRINT RBRACE RETURN RPAREN SEMICOLON STRING TIMES TRUEprogram : functionfunction : INT ID LPAREN RPAREN LBRACE block RETURN  NUMBER SEMICOLON RBRACEblock : block statementblock : emptystatement : INT ID EQUAL expression SEMICOLONstatement : BOOL ID EQUAL expression SEMICOLONstatement : ID EQUAL expression SEMICOLONstatement : IF LPAREN logical_a RPAREN LBRACE block RBRACE logical_a : logical_a OR logical_blogical_a : logical_blogical_b : logical_b AND logical_clogical_b : logical_clogical_c : logical_c EQ logical_dlogical_c : logical_dlogical_d : logical_d LE expressionlogical_d : logical_d GE expressionlogical_d : logical_d LT expressionlogical_d : logical_d GT expressionlogical_d : expressionexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : factorfactor : NUMBERfactor : TRUEfactor : FALSEfactor : IDfactor : LPAREN logical_a RPARENempty :'
    
_lr_action_items = {'INT':([0,7,8,9,13,38,53,58,59,67,68,],[3,-30,10,-4,-3,-7,-5,-6,-30,10,-8,]),'$end':([1,2,43,],[0,-1,-2,]),'ID':([3,7,8,9,10,13,14,17,20,21,29,31,38,39,40,41,46,47,48,49,50,51,52,53,58,59,67,68,],[4,-30,11,-4,16,-3,19,22,22,22,22,22,-7,22,22,22,22,22,22,22,22,22,22,-5,-6,-30,11,-8,]),'LPAREN':([4,15,17,20,21,29,31,39,40,41,46,47,48,49,50,51,52,],[5,20,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'RPAREN':([5,22,24,25,26,27,28,32,33,34,35,36,42,54,55,56,57,60,61,62,63,64,65,66,],[6,-28,-22,-24,-25,-26,-27,45,-10,-12,-14,-19,57,-20,-21,-23,-29,-9,-11,-13,-15,-16,-17,-18,]),'LBRACE':([6,45,],[7,59,]),'RETURN':([7,8,9,13,38,53,58,68,],[-30,12,-4,-3,-7,-5,-6,-8,]),'BOOL':([7,8,9,13,38,53,58,59,67,68,],[-30,14,-4,-3,-7,-5,-6,-30,14,-8,]),'IF':([7,8,9,13,38,53,58,59,67,68,],[-30,15,-4,-3,-7,-5,-6,-30,15,-8,]),'RBRACE':([9,13,30,38,53,58,59,67,68,],[-4,-3,43,-7,-5,-6,-30,68,-8,]),'EQUAL':([11,16,19,],[17,21,31,]),'NUMBER':([12,17,20,21,29,31,39,40,41,46,47,48,49,50,51,52,],[18,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'TRUE':([17,20,21,29,31,39,40,41,46,47,48,49,50,51,52,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'FALSE':([17,20,21,29,31,39,40,41,46,47,48,49,50,51,52,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'SEMICOLON':([18,22,23,24,25,26,27,28,37,44,54,55,56,57,],[30,-28,38,-22,-24,-25,-26,-27,53,58,-20,-21,-23,-29,]),'TIMES':([22,24,25,26,27,28,54,55,56,57,],[-28,41,-24,-25,-26,-27,41,41,-23,-29,]),'PLUS':([22,23,24,25,26,27,28,36,37,44,54,55,56,57,63,64,65,66,],[-28,39,-22,-24,-25,-26,-27,39,39,39,-20,-21,-23,-29,39,39,39,39,]),'MINUS':([22,23,24,25,26,27,28,36,37,44,54,55,56,57,63,64,65,66,],[-28,40,-22,-24,-25,-26,-27,40,40,40,-20,-21,-23,-29,40,40,40,40,]),'LE':([22,24,25,26,27,28,35,36,54,55,56,57,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,49,-19,-20,-21,-23,-29,49,-15,-16,-17,-18,]),'GE':([22,24,25,26,27,28,35,36,54,55,56,57,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,50,-19,-20,-21,-23,-29,50,-15,-16,-17,-18,]),'LT':([22,24,25,26,27,28,35,36,54,55,56,57,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,51,-19,-20,-21,-23,-29,51,-15,-16,-17,-18,]),'GT':([22,24,25,26,27,28,35,36,54,55,56,57,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,52,-19,-20,-21,-23,-29,52,-15,-16,-17,-18,]),'EQ':([22,24,25,26,27,28,34,35,36,54,55,56,57,61,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,48,-14,-19,-20,-21,-23,-29,48,-13,-15,-16,-17,-18,]),'AND':([22,24,25,26,27,28,33,34,35,36,54,55,56,57,60,61,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,47,-12,-14,-19,-20,-21,-23,-29,47,-11,-13,-15,-16,-17,-18,]),'OR':([22,24,25,26,27,28,32,33,34,35,36,42,54,55,56,57,60,61,62,63,64,65,66,],[-28,-22,-24,-25,-26,-27,46,-10,-12,-14,-19,46,-20,-21,-23,-29,-9,-11,-13,-15,-16,-17,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function':([0,],[2,]),'block':([7,59,],[8,67,]),'empty':([7,59,],[9,9,]),'statement':([8,67,],[13,13,]),'expression':([17,20,21,29,31,46,47,48,49,50,51,52,],[23,36,37,36,44,36,36,36,63,64,65,66,]),'term':([17,20,21,29,31,39,40,46,47,48,49,50,51,52,],[24,24,24,24,24,54,55,24,24,24,24,24,24,24,]),'factor':([17,20,21,29,31,39,40,41,46,47,48,49,50,51,52,],[25,25,25,25,25,25,25,56,25,25,25,25,25,25,25,]),'logical_a':([20,29,],[32,42,]),'logical_b':([20,29,46,],[33,33,60,]),'logical_c':([20,29,46,47,],[34,34,34,61,]),'logical_d':([20,29,46,47,48,],[35,35,35,35,62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function','program',1,'p_program_function','parser.py',132),
  ('function -> INT ID LPAREN RPAREN LBRACE block RETURN NUMBER SEMICOLON RBRACE','function',10,'p_function','parser.py',138),
  ('block -> block statement','block',2,'p_block','parser.py',142),
  ('block -> empty','block',1,'p_block_empty','parser.py',147),
  ('statement -> INT ID EQUAL expression SEMICOLON','statement',5,'p_statement_variable','parser.py',153),
  ('statement -> BOOL ID EQUAL expression SEMICOLON','statement',5,'p_statement_variable_bool','parser.py',180),
  ('statement -> ID EQUAL expression SEMICOLON','statement',4,'p_statement_assignment','parser.py',207),
  ('statement -> IF LPAREN logical_a RPAREN LBRACE block RBRACE','statement',7,'p_statement_if','parser.py',230),
  ('logical_a -> logical_a OR logical_b','logical_a',3,'p_logical_or','parser.py',244),
  ('logical_a -> logical_b','logical_a',1,'p_logical_or_direct','parser.py',252),
  ('logical_b -> logical_b AND logical_c','logical_b',3,'p_logical_and','parser.py',257),
  ('logical_b -> logical_c','logical_b',1,'p_logical_and_direct','parser.py',267),
  ('logical_c -> logical_c EQ logical_d','logical_c',3,'p_comparator_equality','parser.py',274),
  ('logical_c -> logical_d','logical_c',1,'p_comparator_equality_direct','parser.py',278),
  ('logical_d -> logical_d LE expression','logical_d',3,'p_relational_less_equal','parser.py',283),
  ('logical_d -> logical_d GE expression','logical_d',3,'p_relational_greater_equal','parser.py',294),
  ('logical_d -> logical_d LT expression','logical_d',3,'p_relational_less','parser.py',305),
  ('logical_d -> logical_d GT expression','logical_d',3,'p_relational_greater','parser.py',316),
  ('logical_d -> expression','logical_d',1,'p_relational_simple_direct','parser.py',328),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','parser.py',334),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','parser.py',344),
  ('expression -> term','expression',1,'p_expression_term','parser.py',353),
  ('term -> term TIMES factor','term',3,'p_term_times','parser.py',357),
  ('term -> factor','term',1,'p_term_exponential','parser.py',367),
  ('factor -> NUMBER','factor',1,'p_factor_num','parser.py',381),
  ('factor -> TRUE','factor',1,'p_factor_true','parser.py',385),
  ('factor -> FALSE','factor',1,'p_factor_false','parser.py',390),
  ('factor -> ID','factor',1,'p_factor_variable','parser.py',395),
  ('factor -> LPAREN logical_a RPAREN','factor',3,'p_factor_expr','parser.py',401),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',405),
]
